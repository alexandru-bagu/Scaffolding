@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic;
@using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Microsoft.EntityFrameworkCore;
using Website.Mvc;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
    var bindString = string.Join(",", modelProperties);
    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}                .Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }
}
    public class @Model.ControllerName : BaseController<@Model.ControllerName, @Model.ContextTypeName>
    {
        private @Model.ContextTypeName _context => DbContext;

        public @(Model.ControllerName)()
        {
        }

        // GET: @routePrefix
@{
        @:public async Task<ActionResult> Index()
        @:{
            @:try
            @:{
                @:Log.Debug("Start Get::Index");
        var includeExpressions = "";
        includeExpressions = String.Join("", relatedProperties
            .Values
            .Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
        if (!String.IsNullOrEmpty(includeExpressions))
        {
                @:var @entitySetVar = _context.@entitySetName@includeExpressions;
                @:return View(await @(entitySetVar).ToListAsync());
        }
        else
        {
                @:return View(await _context.@(entitySetName).ToListAsync());
        }
    }
            }
            catch (Exception ex)
            {
                Log.Error("Error Get::Index", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Get::Index");
            }
        }
    
    
        // GET: @routePrefix/GridView
        public ActionResult GridView()
        {
            try
            {
                Log.Debug("Start Get::GridView");
                return PartialView("_Grid", _context.@(entitySetName));
            }
            catch (Exception ex)
            {
                Log.Error("Error Get::GridView", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Get::GridView");
            }
        }

        // GET: @routePrefix/Details/5
        public async Task<ActionResult> Details(@primaryKeyNullableTypeName id)
        {
            try
            {
                Log.Debug($"Start Get::Details/{id}");
                if (id == null)
                {
                    return NotFound();
                }

                var @Model.ModelVariable = await _context.@(entitySetName)@inlineIncludes
                    .FirstOrDefaultAsync(m => m.@primaryKeyName == id);
                if (@Model.ModelVariable == null)
                {
                    return NotFound();
                }

                return View(@Model.ModelVariable);
            }
            catch (Exception ex)
            {
                Log.Error("Error Get::Details", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Get::Details");
            }
        }

        // GET: @routePrefix/Create
        public ActionResult Create()
        {
            try
            {
                Log.Debug("Start Get::Create");
    @{
        foreach (var property in relatedProperties.Values)
        {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
        }
    }
                return View();
            }
            catch (Exception ex)
            {
                Log.Error("Error Get::Create", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Get::Create");
            }
        }

        // POST: @routePrefix/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "@bindString")] @Model.ModelTypeName @Model.ModelVariable)
        {
            try
            {
                Log.Debug("Start Post::Create");
                if (ModelState.IsValid)
                {
    @{
        if (!string.IsNullOrEmpty(primaryKeyType) && IsGuid(primaryKeyType))
        {
                    @:@(Model.ModelVariable).@primaryKeyName = Guid.NewGuid();
        }
                    @:_context.Add(@Model.ModelVariable);
                    @:await _context.SaveChangesAsync();
    }
                    return RedirectToAction(nameof(Index));
                }
    @{
        foreach (var property in relatedProperties.Values)
        {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
        }
    }
                return View(@Model.ModelVariable);
            }
            catch (Exception ex)
            {
                Log.Error("Error Post::Create", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Post::Create");
            }
        }

        // GET: @routePrefix/Edit/5
        public async Task<ActionResult> Edit(@primaryKeyNullableTypeName id)
        {
            try
            {
                Log.Debug("Start Get::Edit");
                if (id == null)
                {
                    return NotFound();
                }

                var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
                if (@Model.ModelVariable == null)
                {
                    return NotFound();
                }
    @{
        foreach (var property in relatedProperties.Values)
        {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
        }
    }
                return View(@Model.ModelVariable);
            }
            catch (Exception ex)
            {
                Log.Error("Error Get::Edit", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Get::Edit");
            }
        }

        // POST: @routePrefix/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit(@primaryKeyShortTypeName id, [Bind(Include = "@bindString")] @Model.ModelTypeName @Model.ModelVariable)
        {
            try
            {
                Log.Debug("Start Post::Edit");
                if (id != @Model.ModelVariable.@primaryKeyName)
                {
                    return NotFound();
                }

                if (ModelState.IsValid)
                {
                    try
                    {
                        _context.Update(@Model.ModelVariable);
                        await _context.SaveChangesAsync();
                    }
                    catch (DbUpdateConcurrencyException)
                    {
                        if (!@(Model.ModelTypeName)Exists(@Model.ModelVariable.@primaryKeyName))
                        {
                            return NotFound();
                        }
                        else
                        {
                            throw;
                        }
                    }
                    return RedirectToAction(nameof(Index));
                }
    @{
        foreach (var property in relatedProperties.Values)
        {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
        }
    }
                return View(@Model.ModelVariable);
            }
            catch (Exception ex)
            {
                Log.Error("Error Post::Edit", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Post::Edit");
            }
        }

        // GET: @routePrefix/Delete/5
        public async Task<ActionResult> Delete(@primaryKeyNullableTypeName id)
        {
            try
            {
                Log.Debug("Start Get::Delete");
                if (id == null)
                {
                    return NotFound();
                }

                var @Model.ModelVariable = await _context.@(entitySetName)@inlineIncludes
                    .FirstOrDefaultAsync(m => m.@primaryKeyName == id);
                if (@Model.ModelVariable == null)
                {
                    return NotFound();
                }

                return View(@Model.ModelVariable);
            }
            catch (Exception ex)
            {
                Log.Error("Error Get::Delete", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Get::Delete");
            }
        }

        // POST: @routePrefix/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(@primaryKeyShortTypeName id)
        {
            try
            {
                Log.Debug("Start Post::Delete");
                var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
                _context.@(entitySetName).Remove(@Model.ModelVariable);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                Log.Error("Error Post::Delete", ex);
                return Error(ex);
            }
            finally
            {
                Log.Debug("End Post::Delete");
            }
        }

        private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
        {
            return _context.@(entitySetName).Any(e => e.@primaryKeyName == id);
        }
    }
}

namespace Localization
{
    public class @(Model.ModelMetadata.ModelType.Name)
    {
        public const string Title = "@(Model.ModelMetadata.ModelType.Name)";
        public const string TooltipEdit = "Edit @(Model.ModelMetadata.ModelType.Name)";
        public const string TooltipDetails = "View @(Model.ModelMetadata.ModelType.Name) details";
        public const string TooltipDelete = "Delete @(Model.ModelMetadata.ModelType.Name)";
        public const string Create = "Create new";
        public const string NoData = "No data found";
        public const string Back = "Back";
        public const string Save = "Save";
        public const string Details = "Details";
        public const string Edit = "Edit";
        public const string Delete = "Delete";
        @{
            Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
            Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
            {
                if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                    && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                {
        @:public const string @GetValueExpression(property) = "@GetValueExpression(property)";
                }
                else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                {
        @:public const string @GetValueExpression(navigation) = "@GetValueExpression(navigation)";
                }
            }
        }
    }
}

@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }


    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
