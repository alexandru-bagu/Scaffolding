@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@using NonFactors.Mvc.Grid
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@@(Html
    .Grid(Model)
    .Build(columns =>
    {
        @{
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
        @:columns.Add(model => model.@GetValueExpression(property)).Titled(Localization.@(Model.ViewDataTypeShortName).@(property.PropertyName)).Css("grid-column @(Model.ViewDataTypeShortName)GridColumn");
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
        @:columns.Add(model => model.@GetValueExpression(navigation)).Titled(Localization.@(Model.ViewDataTypeShortName).@GetValueExpression(navigation)).Css("grid-column @(Model.ViewDataTypeShortName)GridColumn");
            }
        }
        }

        string Edit = "Edit";
        string Details = "Details";
        string Delete = "Delete";

        columns.Add().Titled("Action").Css("grid-column grid-actions @(Model.ViewDataTypeShortName)GridColumn").RenderedAs(model => new HtmlString($@@"
@{
            string pkName = GetPrimaryKeyName();
            if (pkName != null)
            {
            <span>
                <a class='btn btn-success' href='{(Url.Action(Edit, new { id = model.@pkName }))}'><i class='fa fa-edit' data-toggle='tooltip' title='{Localization.@(Model.ViewDataTypeShortName).TooltipEdit}'></i></a>
                <a class='btn btn-info' href='{(Url.Action(Details, new { id = model.@pkName }))}'><i class='fa fa-folder-open-o' data-toggle='tooltip' title='{Localization.@(Model.ViewDataTypeShortName).TooltipDetails}'></i></a>
                <a class='btn btn-danger' href='{(Url.Action(Delete, new { id = model.@pkName }))}'><i class='fa fa-remove' data-toggle='tooltip' title='{Localization.@(Model.ViewDataTypeShortName).TooltipDelete}'></i></a>
            </span>
            }
            else
            {
            <span>
                <a class='btn btn-success' href='{(Url.Action(Edit, new { /* id = model.Id */ }))}'><i class='fa fa-edit' data-toggle='tooltip' title='{Localization.@(Model.ViewDataTypeShortName).TooltipEdit}'></i></a>
                <a class='btn btn-info' href='{(Url.Action(Details, new { /* id = model.Id */ }))}'><i class='fa fa-folder-open-o' data-toggle='tooltip' title='{Localization.@(Model.ViewDataTypeShortName).TooltipDetails}'></i></a>
                <a class='btn btn-danger' href='{(Url.Action(Delete, new { /* id = model.Id */ }))}'><i class='fa fa-remove' data-toggle='tooltip' title='{Localization.@(Model.ViewDataTypeShortName).TooltipDelete}'></i></a>
            </span>
            }}"));
    })
    @if (GetPrimaryKeyName() != null)
    {
    @:.RowAttributed(model => new { data_id = model.@GetPrimaryKeyName() })
    }
    .Empty(@@Localization.@(Model.ViewDataTypeShortName).NoData)
    .Id("@(Model.ViewDataTypeShortName)Grid")
    .Filterable()   
    .Sortable() 
    .Pageable(pager => { pager.RowsPerPage = 10; })
)

@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
