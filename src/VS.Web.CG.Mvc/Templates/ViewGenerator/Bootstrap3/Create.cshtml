@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

<!-- form target initialization -->
@@{
    string actionName = (string)ViewData["ActionName"];
    if(string.IsNullOrEmpty(actionName))
    {
        actionName = "@Model.ViewName";
    }
    string controllerName = (string)ViewData["ControllerName];
    if(string.IsNullOrEmpty(controllerName))
    {
        controllerName = "@(Model.ControllerName.Substring(0, Model.ControllerName.Length - Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Constants.ControllerSuffix.Length))";
    }
    bool isAjax = false;
    if(ViewData["IsAjaxView"] != null && ViewData["IsAjaxView"] is Boolean)
    {
        isAjax = (bool)ViewBag.IsAjaxView;
    }

    if(isAjax)
    {
        Layout = null; //disable layout
    }
}
<!-- /form target initialization -->
@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:if(!isAjax)
    @:{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
        @:Layout = "@Model.LayoutPageFile";
        }
    @:}
@:}
@:
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}
    
<div class="box">
    @@if(!isAjax)
    {
    <div class="box-header with-border">
        <h2 class="box-title">@@Localization.@(Model.ViewDataTypeShortName).Create @@Localization.@(Model.ViewDataTypeShortName).Title</h2>
        <span class="pull-right no-margin">
        @{
            @:<a class="btn btn-success" href="@@Url.Action("Index")">@@Localization.@(Model.ViewDataTypeShortName).Back</a>
        }
        </span>
    </div>
    }
    <!-- /.box-header -->
    <div class="box-body">
        @@using (Html.BeginForm(actionName, controllerName)) 
        {
            @@Html.AntiForgeryToken()
            @@Html.Hidden("__isAjax", isAjax)
    
            <div class="form-horizontal">
                @@Html.ValidationSummary(true, "", new { @@class = "text-danger" })

                @foreach (var property in Model.ModelMetadata.Properties)
                {
                    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                    {
                        if (property.IsForeignKey)
                        {
                @:<div class="form-group">
                    @:@@Html.LabelFor(model => model.@property.PropertyName, @@Localization.@(Model.ViewDataTypeShortName).@GetAssociationName(property), htmlAttributes: new { @@class = "control-label" })
                    @:@@Html.DropDownList("@property.PropertyName", null, htmlAttributes: new { @@class = "form-control" })
                    @:@@Html.ValidationMessageFor(model => model.@property.PropertyName, "", new { @@class = "text-danger" })
                @:</div>
                            continue;
                        }

                        bool isCheckbox = property.TypeName.Equals("System.Boolean");
                        if (isCheckbox)
                        {
                @:<div class="form-group">
                    @:<div class="checkbox">
                        @:<label>
                            @:@@Html.CheckBoxFor(model => model.@property.PropertyName)
                            @:@@Localization.@(Model.ViewDataTypeShortName).@GetAssociationName(property)
                        @:</label>
                    @:</div>
                @:</div>
                        }
                        else if (property.IsEnum && !property.IsEnumFlags)
                        {
                @:<div class="form-group">
                    @:@@Html.LabelFor(model => model.@property.PropertyName, @@Localization.@(Model.ViewDataTypeShortName).@GetAssociationName(property), htmlAttributes: new { @@class = "control-label" })
                    @:@@Html.EnumDropDownListFor(model => model.@property.PropertyName, htmlAttributes: new { @@class = "form-control" })
                    @:@@Html.ValidationMessageFor(model => model.@property.PropertyName, "", new { @@class = "text-danger" })
                @:</div>
                        }
                        else if (property.IsMultilineText)
                        {
                @:<div class="form-group">
                    @:@@Html.LabelFor(model => model.@property.PropertyName, @@Localization.@(Model.ViewDataTypeShortName).@GetAssociationName(property), htmlAttributes: new { @@class = "control-label" })
                    @:@@Html.TextAreaFor(model => model.@property.PropertyName, new { htmlAttributes = new { @@class = "form-control" } })
                    @:@@Html.ValidationMessageFor(model => model.@property.PropertyName, "", new { @@class = "text-danger" })
                @:</div>
                        }
                        else
                        {
                @:<div class="form-group">
                    @:@@Html.LabelFor(model => model.@property.PropertyName, @@Localization.@(Model.ViewDataTypeShortName).@GetAssociationName(property), htmlAttributes: new { @@class = "control-label" })
                    @:@@Html.EditorFor(model => model.@property.PropertyName, new { htmlAttributes = new { @@class = "form-control" } })
                    @:@@Html.ValidationMessageFor(model => model.@property.PropertyName, "", new { @@class = "text-danger" })
                @:</div>
                        }
                    }
                }


                <div class="form-group">
                    <input type="submit" value="@("@Localization."+Model.ViewDataTypeShortName+".Create")" class="btn btn-default" />
                </div>
            </div>
        }
    </div>
<!-- /.box-body -->
</div>
@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@Scripts.Render("~/bundles/jqueryval")
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }
}
